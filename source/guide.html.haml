---
title: Основы Sass
meta_desc: Введение в sass - переменные, вложенности, фрагментирование, импорт, миксины, наследование и операторы
meta_key: sass, scss, mixin, variables, nesting, partials, inheritance, operators, миксины, переменные, вложенности, фрагментирование, импорт, наследование, операторы, препроцессор, основы
---

%p.introduction
  Прежде, чем Вы сможете использовать Sass, Вам необходимо его настроить в вашем
  проекте. Если Вы хотите просто почитать, то не стесняйтесь — читайте, но мы
  рекомендуем сначала установить Sass.
  = link_to "Установите Sass", "/install"
  для того, чтобы разобраться во всех возможностях Sass.

- content_for :complementary do
  %h3 Разделы
  %ul.anchors
    %li= link_to "Препроцессор",     "#topic-1"
    %li= link_to "Переменные",       "#topic-2"
    %li= link_to "Вложенности",      "#topic-3"
    %li= link_to "Фрагментирование", "#topic-4"
    %li= link_to "Импорт",           "#topic-5"
    %li= link_to "Миксины",          "#topic-6"
    %li= link_to "Наследование",     "#topic-7"
    %li= link_to "Операторы",        "#topic-8"

%ul.slides
  %li#topic-1
    :markdown
      ## Препроцессинг

      Написание CSS само по себе весело, но когда таблица стилей становится огромной,
      то становится и сложно её обслуживать. И вот в таком случае нам поможет препроцессор.
      Sass позволяет использовать функции недоступные в самом CSS, например, переменные,
      вложенности, миксины, наследование и другие приятные вещи, возвращающие удобство написания CSS.

      Как только Вы начинаете пользоваться Sass, препроцессор обрабатывает ваш Sass-файл и сохраняет
      его как простой CSS-файл, который Вы сможете использовать на любом сайте.

      Самый простой способ получить такой результат - использовать терминал. После того, как Sass установлен,
      вы можете компилировать ваш Sass в CSS, используя команду `sass`. Вам всего лишь нужно
      сообщить Sass, где взять файл Sass и в какой файл CSS его скомпилировать. Например,
      запустив команду `sass input.scss output.css` в терминале, вы сообщаете Sass взять один
      Sass файл, `input.scss`, и скомпилировать в файл `output.css`.

    %hr/

  %li#topic-2
    :markdown
      ## Переменные

      Думайте о переменных, как о способе хранения информации, которую вы хотите использовать на протяжении написания
      всех стилей проекта. Вы можете хранить в переменных цвета, стеки шрифтов или любые другие значения CSS, которые
      вы хотите использовать. Чтобы создать переменную в Sass нужно использовать символ <code>$</code>. Рассмотрим пример:

    %ul
      %li= link_to "SCSS", "#topic-2-SCSS"
      %li= link_to "Sass", "#topic-2-Sass"

    #topic-2-SCSS
      %h3 Синтаксис SCSS
      ~ partial "code-snippets/homepage-variables-scss"

    #topic-2-Sass
      %h3 Синтаксис Sass
      ~ partial "code-snippets/homepage-variables-sass"

    :markdown
      Когда Sass обрабатывается, он принимает значения, заданные нами в <code>$font-stack</code> и <code>$primary-color</code>
      и вставляет их в обычном CSS-файле в тех местах, где мы указывали переменные как значения. Таким образом переменные
      становятся мощнейшей возможностью, например, при работе с фирменными цветами, используемыми на всем сайте.

    ~ partial "code-snippets/homepage-variables-css"

    %hr/

  %li#topic-3
    :markdown
      ## Вложенности

      При написании HTML, Вы, наверное, заметили, что он имеет четкую вложенную и визуальную иерархию. С CSS это не так.

      Sass позволит вам вкладывать CSS селекторы таким же образом, как и в визуальной иерархии HTML. Но помните, что
      чрезмерное количество вложенностей делает ваш документ менее читабельным и воспринимаемым, что считается
      плохой практикой.

      Чтобы понять что мы имеем ввиду, приведем типичный пример стилей навигации на сайте:

    %ul
      %li= link_to "SCSS", "#topic-3-SCSS"
      %li= link_to "Sass", "#topic-3-Sass"

    #topic-3-SCSS
      %h3 Синтаксис SCSS
      ~ partial "code-snippets/homepage-nesting-scss"

    #topic-3-Sass
      %h3 Синтаксис Sass
      ~ partial "code-snippets/homepage-nesting-sass"

    :markdown

      Вы заметили, что селекторы <code>ul</code>, <code>li</code>, и <code>a</code> являются вложенными в селектор <code>nav</code>?
      Это отличный способ сделать ваш CSS-файл более читабельным. Когда вы сгенерируете CSS-файл, то на выходе вы получите
      что-то вроде этого:

    ~ partial "code-snippets/homepage-nesting-css"

    %hr/

  %li#topic-4
    :markdown
      ## Фрагментирование

      Вы можете создавать фрагменты Sass-файла, которые будут содержать в себе небольшие отрывки CSS, которые
      можно будет использовать в других Sass-файлах. Это отличный способ сделать ваш CSS модульным, а также
      облегчить его обслуживание. Фрагмент — это простой Sass-файл, имя которого начинается с нижнего подчеркивания,
      например, <code>_partial.scss</code>. Нижнее подчеркивание в имени Sass-файла говорит компилятору
      о том, что это только фрагмент и он не должен компилироваться в CSS. Фрагменты Sass подключаются при
      помощи директивы <code>@import</code>.

      ***

  %li#topic-5
    :markdown
      ## Импорт

      CSS имеет возможность импорта, которая позволяет разделить ваш CSS-файл на более мелкие и облегчить их
      в обслуживании. Но у этого способа есть весомый недостаток: каждый раз когда вы в CSS используете <code>@import</code>,
      то в CSS создается еще один HTTP-запрос. Sass берет идею импорта файлов через директиву <code>@import</code>,
      но вместо создания отдельного HTTP-запроса Sass импортирует указанный в директиве файл в тот, где он вызывается,
      т.е. на выходе получается один CSS-файл, скомпилированный из нескольких фрагментов.

      Например, у вас есть несколько фрагментов Sass-файлов — <code>\_reset.scss</code> и <code>base.scss</code>. И мы
      хотим импортировать <code>\_reset.scss</code> в <code>base.scss</code>.

    %ul
      %li= link_to "SCSS", "#topic-5-SCSS"
      %li= link_to "Sass", "#topic-5-Sass"

    #topic-5-SCSS
      %h3 Синтаксис SCSS
      ~ partial "code-snippets/homepage-import-1-scss"
      ~ partial "code-snippets/homepage-import-2-scss"

    #topic-5-Sass
      %h3 Синтаксис Sass
      ~ partial "code-snippets/homepage-import-1-sass"
      ~ partial "code-snippets/homepage-import-2-sass"

    :markdown

      Обратите внимание на то, что мы используем <code>@import 'reset';</code> в <code>base.scss</code> файле. Когда вы
      импортируете файл, то не нужно указывать расширение <code>.scss</code>. Sass — умный язык и он сам догадается.
      Когда CSS сгенерируется вы получите:

    ~ partial "code-snippets/homepage-import-css"

    %hr/

  %li#topic-6
    :markdown
      ## Миксины (примеси)

      Некоторые вещи в CSS весьма утомительно писать, особенно в CSS3, где плюс ко всему зачастую требуется использовать
      большое количество вендорных префиксов. Миксины позволяют создавать группы деклараций CSS, которые вам придется
      использовать по нескольку раз на сайте. Хорошо использовать миксины для вендорных префиксов. Пример для <code>border-radius</code>:

    %ul
      %li= link_to "SCSS", "#topic-6-SCSS"
      %li= link_to "Sass", "#topic-6-Sass"

    #topic-6-SCSS
      %h3 Синтаксис SCSS
      ~ partial "code-snippets/homepage-mixins-scss"

    #topic-6-Sass
      %h3 Синтаксис Sass
      ~ partial "code-snippets/homepage-mixins-sass"

    :markdown
      Для создания миксина используйте директиву <code>@mixin</code> + название этого миксина. Мы назвали наш миксин
      <code>border-radius</code>. Также, в миксине мы используем переменную <code>$radius</code> внутри скобок, тем самым
      позволяя себе передавать в переменной все, что захотим. После того, как вы создали миксин, вы можете его использовать
      в качестве параметра CSS, начиная вызов с <code>@include</code> и имени миксина. Когда ваш CSS скомпилируется
      вы получите следующее:

    ~ partial "code-snippets/homepage-mixins-css"

    %hr/

  %li#topic-7
    :markdown
      ## Расширение/Наследование

      Это одна из самых полезных функций Sass. Используя директиву <code>@extend</code> можно наследовать наборы свойств
      CSS от одного селектора другому. Это позволяет держать ваш Sass-файл в «чистоте». В нашем примере мы покажем вам как
      сделать стили оповещений об ошибках, предупреждениях и удачных исходах, используя другие возможности Sass,
      которые идут рука-об-руку с расширением, классами-шаблонами.

      Класс-шаблон - особый тип классов, который выводится только при использовании расширения - это позволит
      сохранить ваш скомпилированный CSS чистым и аккуратным.

    %ul
      %li= link_to "SCSS", "#topic-7-SCSS"
      %li= link_to "Sass", "#topic-7-Sass"

    #topic-7-SCSS
      %h3 Синтаксис SCSS
      ~ partial "code-snippets/homepage-extend-scss"

    #topic-7-Sass
      %h3 Синтаксис Sass
      ~ partial "code-snippets/homepage-extend-sass"

    :markdown
      Вышеуказанный код сообщает классам <code>.message</code>,
      <code>.success</code>, <code>.error</code> и <code>.warning</code>
      вести себя как <code>%message-shared</code>. Это означает, что где бы не
      вызывался <code>%message-shared</code>, то и <code>.message</code>,
      <code>.success</code>, <code>.error</code> и <code>.warning</code> тоже
      будут вызваны. Магия происходит в сгенерированном CSS, где каждый из этих классов
      получает css-свойства, как и <code>%message-shared</code>. Это позволит вам
      избежать написания множества классов в HTML элементах.

      Вы можете расширить большинство простых CSS селекторов прибавление к классам-шаблонам
      в Sass, однако, использование шаблонов - простейший способ быть уверенным, что
      вы не расширяете класс везде, где он используется в ваших стилях, что могло бы привести
      к непреднамеренным наборам стилей в вашем CSS.

      Когда вы генерируете ваш CSS, то он будет выглядеть как пример ниже. Обратите внимание,
      <code>%equal-heights</code> не попадает в CSS, так как ни разу не был использован.

    ~ partial "code-snippets/homepage-extend-css"

    %hr/

  %li#topic-8
    :markdown
      ## Математические операторы

      Использовать математику в CSS очень полезно. Sass имеет несколько стандартных математических операторов, таких как
      `+`, `-`, `*`, `/` и `%`. В нашем примере мы совершаем простые математические вычисления для расчета ширины
      `aside` и `article`.

    %ul
      %li= link_to "SCSS", "#topic-8-SCSS"
      %li= link_to "Sass", "#topic-8-Sass"

    #topic-8-SCSS
      %h3 Синтаксис SCSS
      ~ partial "code-snippets/homepage-operators-scss"

    #topic-8-Sass
      %h3 Синтаксис Sass
      ~ partial "code-snippets/homepage-operators-sass"

    :markdown
      Мы создали простую адаптивную модульную сетку, с шириной в 960 пикселей. Используя математические операторы, мы
      использовали полученные данные с пиксельными значениями и конвертировали их в процентные, причем без особых усилий.
      Скомпилированный CSS выглядит так:

    ~ partial "code-snippets/homepage-operators-css"